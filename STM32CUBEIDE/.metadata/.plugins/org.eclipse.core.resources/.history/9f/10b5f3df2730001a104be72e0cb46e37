/**
 ******************************************************************************
 * @file    main.c
 * @author  Auto-generated by STM32CubeIDE
 * @version V1.0
 * @brief   Default main function.
 ******************************************************************************
 */



#include <stdio.h>
#include "uart_driver.h"
#include <stdint.h>

#define F_CPU 16000000UL

#define PERIPH_BASE 0x40000000
#define RCC_BASE (PERIPH_BASE + 0x23800)
#define AHB1ENR (RCC_BASE + 0x30)

#define GPIO_PORT_SPACING 0x400
#define GPIO_BASE (PERIPH_BASE + 0x20000)
#define GPIO_PINS_PER_PORT 16
#define GPIO_C (2 * GPIO_PINS_PER_PORT)
#define GPIO_PORT_C 2 //GPIO C
//
#define LED_NUCLEO_GPIO_PORT 1 // Port B
#define LED_NUCLEO_GPIO_PIN 5
#define LED_NUCLEO_GPIO_PORT_BASE (GPIO_BASE + LED_NUCLEO_GPIO_PORT * GPIO_PORT_SPACING)

#define GPIO_ODR (LED_NUCLEO_GPIO_PORT_BASE + 0x14)
#define GPIO_MODER (LED_NUCLEO_GPIO_PORT_BASE + 0x00)

//
#define LCD_DATA_GPIO_PORT 0 // GPIO A
#define LCD_DATA_GPIO_BASE 8
#define LCD_RS_GPIO (8)
#define LCD_RW_GPIO (9)
#define LCD_E_GPIO (10)

//not sure what to call
#define LCD_DATA_PORT_BASE_A (GPIO_BASE +  LCD_DATA_GPIO_PORT * GPIO_PORT_SPACING)
#define LCD_DATA_PORT_BASE_C (GPIO_BASE +  GPIO_PORT_C * GPIO_PORT_SPACING)

#define GPIO_MODER_A (LCD_DATA_PORT_BASE_A + 0x00)
#define GPIO_MODER_C (LCD_DATA_PORT_BASE_C + 0x00)

#define LCD_RW_WRITE 0
#define LCD_RW_READ 1
#define LCD_RS_INSTR 0
#define LCD_RS_DATA 1
#define LCD_E_START 1
#define LCD_E_IDLE 0
#define LCD_BUSY 0x80

//Fix prototypes
void lcd_init(void);
void lcd_clear(void);
void lcd_home(void);
void lcd_set_position(void);
void lcd_print_string(void);
void lcd_print_num(void);

static void lcd_pint_char(void);
static void lcd_data(void);
static void lcd_command(void);


// main
int main(void){
	//	init_usart2(19200,F_CPU);
	//	printf("Hello World!!\n");

	//gpio mode output
	while(output <= 15) {
		uint32_t *gpioMode = (uint32_t*) GPIO_MODER;
		*gpioMode = (*gpioMode|(0b01<<(output*2)));
		output++;
	}
	return 0;
}


void lcd_init(void) {
	//enable clock register (gpio A)
	uint32_t *rcc = (uint32_t*) AHB1ENR;
	*rcc = (*rcc|(1<<LCD_DATA_GPIO_PORT));

	//initialize I/O
	//enable gpio C
	//RS_GPIO
	*rcc = (*rcc|(1<<GPIO_PORT_C));

	//For GPIO MODER A, set mode to output for 8-10
	uint32_t *gpioModeA = (uint32_t*) GPIO_MODER_A;
	*gpioModeA = (*gpioModeA|(0b01<<(LCD_RS_GPIO*2)));
	*gpioModeA = (*gpioModeA|(0b01<<(LCD_RW_GPIO*2)));
	*gpioModeA = (*gpioModeA|(0b01<<(LCD_E_GPIO*2)));

	//gpio MODER for C
	uint32_t *gpioMode = (uint32_t*) GPIO_MODER_C;
	//pin 8
	*gpioMode = (*gpioMode|(0b01<<(LCD_RS_GPIO*2)));

	//RW_GPIO
	//pin9
	*gpioMode = (*gpioMode|(0b01<<(LCD_RW_GPIO*2)));

	//E_GPIO
	//pin 10
	*gpioMode = (*gpioMode|(0b01<<(LCD_E_GPIO*2)));

	//CONFIGURE DISPLAY
	//delay 41 miliseconds

	//call to write setup
	//call to write half
	//delay 38 microseconds
	//set rs to INtructions/

	//call lcd_clear

	//call lcd_home

}


void lcd_clear() {
	//clears lcd

}


void lcd_home() {
	//homes lcd

}


void lcd_set_position() {

}



/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/



#include <stdio.h>
#include "uart_driver.h"
#include "registers.h"

#define F_CPU 16000000UL

#include "delay.h"
#include "speaker.h"
#include <inttypes.h>
#include <stdio.h>

// main
int main(void){

	while (1!=0) {

	init_usart2(19200,F_CPU);
	//enable clock GPIO B
	//uint32_t *clock = (uint32_t) RCC_BASE;
	//*clock |= (1<<1);

	//tone(4,1000,500);

	//analog mode PB4
	//uint32_t *speaker = (uint32_t) GPIOB_BASE;
	//*speaker |= (0b11<<(4*2));

	init_speaker();
	tone a[2];
	a[0].note = Do;
	a[0].dur = 100;


	play(a, 1);


	}

	// never return
	for(;;){}

	return 0;
}

void init_speaker(){
       // Enable GPIOB and TIM3
       *(RCC_AHB1ENR) |= (1 << GPIOB_EN);
       *(RCC_APB1ENR) |= (1 << TIM3);

       // Set speaker pin to alternate function mode
       *(GPIOB_MODR) &= ~(0b11 << SPEAKER);
       *(GPIOB_MODR) |= (0b10 << SPEAKER);

       // Set function
       *(GPIOB_AFRL) &= ~(0xF << 16);
       *(GPIOB_AFRL) |= 2<<16;


       // Setup the timer/counter to toggle the output
       *(TIM3_CCMR1) &= ~(0b111 << 4);
       *(TIM3_CCMR1) |= (0b011 << 4);

       // Enable output compare
       *(TIM3_CCER) |= 1;
}

void speak(uint16_t freq, uint32_t d_time){
       // Set ARR and CRR to half-period count
       int period = 4000000 / freq;
    *(TIM3_ARR)  = period;
    *(TIM3_CCR1) = period;

    // Enable counter
    *(TIM3_CR1) |= 1;
    // Delay d_time ms
    delay_1ms(d_time);
    //Disable counter
    *(TIM3_CR1) &= ~1;
}

void play(tone tones[], int size){
       for (int i=0; i<size; i++){
              speak(tones[i].note, tones[i].dur);
       }
}

